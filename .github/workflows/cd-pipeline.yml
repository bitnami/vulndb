name: '[CI/CD] CD Pipeline'
on: # rebuild any PRs and main branch changes
  push:
    branches:
      - main
    # Run for changes in config's JSON files. Never for markdown files
    paths:
      - 'config/components/**.json'
      - '!**.md'
permissions:
  contents: read
jobs:
  s3-upload:
    runs-on: ubuntu-latest
    name: 'Upload modified files to s3'
    if: ${{ github.repository_owner == 'bitnami' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 2 # to be able to obtain files changed in the latest commit
      - name: Install and configure s3cmd
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update && sudo apt-get install -y s3cmd
      - id: s3-upload
        name: 'Upload updated files'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.MAIN_CATALOG_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.MAIN_CATALOG_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET: ${{ secrets.MAIN_CATALOG_BUCKET }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          readarray -t files_changed < <(git show --pretty="" --name-only)
          for f in "${files_changed[@]}"; do
            base_filename="$(basename -- "$f")"
            file_extension="${base_filename##*.}"
            if [[ -f "$f" ]] && [[ "$file_extension" = "json" ]]; then
              s3_dest="s3://${AWS_S3_BUCKET}/securityConfig/${base_filename}"
              # Override present file with latest version available
              s3cmd put --force "${{ github.workspace }}/${f}" "$s3_dest"
            fi
          done
  # If the CD Pipeline does not succeed we should notify the interested agents
  notify:
    name: Send notification
    needs:
      - s3-upload
    if: ${{ always() && (needs.s3-upload.result != 'success') }}
    uses: bitnami/support/.github/workflows/gchat-notification.yml@main
    with:
      workflow: ${{ github.workflow }}
      job-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    secrets:
      webhook-url: ${{ secrets.GCHAT_CONTENT_ALERTS_WEBHOOK_URL }}
